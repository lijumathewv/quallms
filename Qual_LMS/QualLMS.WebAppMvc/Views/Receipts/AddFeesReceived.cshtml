@using QualLMS.Domain.APIModels
@using QualLMS.Domain.Models
@using QualvationLibrary

@model AddFeesReceivedData

@inject CustomLogger logger
@inject Client client
@inject LoginProperties login

@{
    var IsError = logger.IsError;
    var IsSuccess = logger.IsSuccess;
    var ErrorMessage = logger.ErrorMessage;
    var SuccessMessage = logger.SuccessMessage;

    var UserSelect = new SelectList(Model.Students, "Id", "FullName");
    var CourseSelect = new SelectList(Model.Courses, "Id", "CourseName");
    var FeesSelect = new SelectList(Model.Fees, "Id", "FeesName");

}

<h2 class="main-title-w3layouts mb-2 text-center">Add Receipt</h2>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/home">Home</a></li>
        <li class="breadcrumb-item"><a href="/Receipts">Receipts</a></li>
        <li class="breadcrumb-item active">Add/Edit</li>
    </ol>
</nav>

<section class="forms-section">
    <div class="container-fluid">
        <div class="row">
            <div class="outer-w3-agile col-xl mt-3">
                <form method="post">
                    <div>
                        <div class="form-row">
                            <div class="col-md-4">
                                <label for="CourseId">Student</label>
                                @Html.DropDownList("StudentId", UserSelect as SelectList, "-- Please Select --", new { @class = "form-control" })
                            </div>
                            <div class="col-md-4">
                                <label for="CourseId">Course</label>
                                @Html.DropDownList("CourseId", CourseSelect as SelectList, "-- Please Select --", new { @class = "form-control" })
                            </div>
                            <div class="col-md-4">
                                <label for="FeesId">Fees Type</label>
                                <div class="form-group col-md-11">
                                    @Html.DropDownList("FeesId", FeesSelect as SelectList, "-- Please Select --", new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-row">
                            <div class="col-md-4">
                                <label for="ReceiptNumber">Receipt Number</label>
                                <input type="text" class="form-control" name="ReceiptNumber" asp-for="@Model.ReceiptNumber" placeholder="Receipt Number is mandatory" required="">
                            </div>
                            <div class="col-md-4">
                                <label for="ReceiptDate">Receipt Date</label>
                                <input type="date" class="form-control" name="ReceiptDate" asp-for="@Model.ReceiptDate" placeholder="Receipt Date is mandatory" required="">
                            </div>
                            <div class="col-md-4">
                                <label for="Fees">Receipt Fees</label>
                                <input type="number" class="form-control" id="ReceiptFees" name="ReceiptFees" asp-for="@Model.ReceiptFees" placeholder="Fees is mandatory" required="">
                                <input type="hidden" class="form-control" id="BalanceAmount" name="BalanceAmount">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary" asp-page-handler="Submit">Submit</button>
                    </div>
                    @if (ViewBag.IsError != null)
                    {
                        if (ViewBag.IsError)
                        {
                            <div class="form-group">
                                <div class="alert alert-danger" role="alert">
                                    @Html.Raw(ViewBag.ErrorMessage);
                                </div>
                            </div>
                        }
                    }
                    @if (ViewBag.IsSuccess != null)
                    {
                        if (ViewBag.IsSuccess)
                        {
                            <div class="form-group">
                                <div class="alert alert-success" role="alert">
                                    @Html.Raw(ViewBag.SuccessMessage);
                                </div>
                            </div>
                        }
                    }
                </form>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <script>
        var dropDownCourse = document.getElementById('CourseId');
        dropDownCourse.addEventListener('change', handleCourse);

        var dropDownUser = document.getElementById('StudentId');
        dropDownUser.addEventListener('change', handleUsers);

        function handleUsers(event) {
            var id = $("#StudentId").val();

            var url = "/studentcourses?StudentId=" + id;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    var course = document.getElementById('CourseId');

                    course.innerHTML = '';

                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = '-- Please Select --';
                    course.appendChild(defaultOption);

                    console.log(data);

                    var model = JSON.parse(data.returnmodel);

                    model.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.CourseId;
                        option.textContent = item.CourseName;
                        course.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }

        function handleCourse(event) {
            var StudentId = $("#StudentId").val();
            console.log(StudentId);
            var id = $("#CourseId").val();
            console.log(id);

            var url = "@logger.BaseURL" + "/Feesbalance?StudentId=" + StudentId + "&CourseId=" + id;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data.returnmodel);
                    $('#ReceiptFees').val(data.returnmodel);
                    $('#BalanceAmount').val(data.returnmodel);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }

        function AddFeesType(event) {
            event.preventDefault();
            var url = "@logger.BaseURL" + "Fees/add";

            var FeesName = $("#FeesName").val();

            var form = new FormData();
            form.append("Id", generateGUID());
            form.append("FeesName", FeesName);
            form.append("OrganizationId", '@login.OrganizationId.ToString()');

            console.log(form);

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: form
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                })
                .catch(error => {
                    console.error('Error fetching data:');
                });
        }
    </script>
}
