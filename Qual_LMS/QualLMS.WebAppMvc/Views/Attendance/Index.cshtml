@using System.Text.Json
@using QualLMS.Domain.APIModels
@using QualLMS.Domain.Models
@using QualvationLibrary

@model ViewAttendanceData

@inject CustomLogger logger

@{
    var data = JsonSerializer.Serialize(Model.Data);

    Roles CurrentRole = logger.LoginRole;

    bool IsError = false;
    string ErrorMessage = "";
    string SuccessMessage = "";

    if (ViewBag.IsError != null)
    {
        IsError = logger.IsError;
        ErrorMessage = logger.ErrorMessage;
    }
    bool IsSuccess = false;
    if (ViewBag.IsSuccess != null)
    {
        IsSuccess = logger.IsSuccess;
        SuccessMessage = logger.SuccessMessage;
    }
}

<h2 class="main-title-w3layouts mb-2 text-center">Attendance</h2>


<div class="form-row">
    <div class="col-md-12 md-3">
        @if (!Model.IsCheckedIn)
        {
            <button id="checkin-btn" class="btn btn-success" name="checkin-btn" onclick="Checkin()">Check In</button>
        }
        &nbsp; &nbsp;
        @if (!Model.IsCheckedOut)
        {
            <button id="checkout-btn" class="btn btn-primary" name="checkout-btn" onclick="Checkout()">Check Out</button>
        }
        &nbsp; &nbsp;
    </div>

    <div class="col-md-12 md-3">
        &nbsp;
    </div>
</div>

<div class="form-row">
    <div id="dangerdiv" class="alert alert-danger" role="alert" style="visibility:hidden">
        <p id="dangermsg"></p>
    </div>
    <div id="successdiv" class="alert alert-success" role="alert" style="visibility:hidden">
        <p id="successmsg"></p>
    </div>
</div>

<div class="form-row">
    <div class="col-md-12 md-3">
        <div id="myGrid" class="ag-theme-quartz" style="height: 500px"></div>
    </div>
</div>



@section StylesAndScripts {
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
}

@section Scripts {

    <script>
        function Checkin() {
            console.log("Check-in");
            const url = '/CheckIn';

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                success: function (response) {
                    let res = JSON.parse(response);                    
                    console.log(res.flag);

                    if (!res.flag) {
                        var div = document.getElementById('dangerdiv');
                        div.style.visibility = 'visible';

                        $('#dangermsg').text(res.message);
                        console.log($('#dangermsg'));
                    }
                    else {
                        var div = document.getElementById('successdiv');
                        div.style.visibility = 'visible';
                        var div1 = document.getElementById('dangerdiv');
                        div1.style.visibility = 'collapsed';

                        $('#successmsg').text(res.message);

                        location.reload(true);
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        function Checkout() {
            console.log("Check-out");
            const url = '/CheckOut';

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                success: function (response) {
                    let res = JSON.parse(response);
                    console.log(res.flag);

                    if (!res.flag) {
                        var div = document.getElementById('dangerdiv');
                        div.style.visibility = 'visible';

                        $('#dangermsg').text(res.message);
                        console.log($('#dangermsg'));
                    }
                    else {
                        location.reload(true);
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        $(document).ready(function () {
            console.log("ready!");
            var model = @Html.Raw(data);
            console.log(model);

            let gridApi;

            // Grid Options: Contains all of the data grid configurations
            var gridOptions = {
                suppressRowTransform: true,
                autoSizeStrategy: {
                    type: 'fitCellContents'
                },
                overlayNoRowsTemplate:
                    '<span style="padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow; color: red;">No Data Available</span>',
                // Row Data: The data to be displayed.
                rowData: model,
                // Column Definitions: Defines the columns to be displayed.
                columnDefs: [
                    { headerName: 'ID', field: 'id', pinned: "left" },
                    { headerName: 'Full Name', field: 'FullName', pinned: "left" },
                    {
                        headerName: 'Attendance Date', field: 'attendanceDate', cellRenderer: function dateRenderer(params) {
                            const date = new Date(params.value);
                            const day = date.getDate().toString().padStart(2, '0');
                            const monthIndex = date.getMonth();
                            const months = [
                                "January", "February", "March", "April", "May", "June",
                                "July", "August", "September", "October", "November", "December"
                            ];
                            const year = date.getFullYear();
                            return `${day} - ${months[monthIndex]} - ${year}`;
                        }
                    },
                    {
                        headerName: 'Check-In', field: 'checkIn', cellRenderer: function timeFormatter(params) {
                            const date = new Date(params.value);
                            const hours = date.getHours().toString().padStart(2, '0');
                            const minutes = date.getMinutes().toString().padStart(2, '0');
                            const seconds = date.getSeconds().toString().padStart(2, '0');
                            return `${hours}:${minutes}:${seconds}`;
                        }
                    },
                    {
                        headerName: 'Check-Out', field: 'checkOut', cellRenderer: function timeFormatter(params) {
                            if (params.value) { 
                                const date = new Date(params.value);

                                const hours = date.getHours().toString().padStart(2, '0');
                                const minutes = date.getMinutes().toString().padStart(2, '0');
                                const seconds = date.getSeconds().toString().padStart(2, '0');
                                return `${hours}:${minutes}:${seconds}`;
                            }
                        }
                    }
                ]
            };

            // Your Javascript code to create the data grid
            const myGridElement = document.querySelector('#myGrid');
            gridApi = agGrid.createGrid(myGridElement, gridOptions);

            function getBoolean(id) {
                var field = document.querySelector("#" + id);

                return !!field.checked;
            }

            function getParams() {
                return {
                    allColumns: true,
                };
            }
            window.exportToCsv = function () {
                gridApi.exportDataAsCsv(getParams());
            };
        });
    </script>
}
